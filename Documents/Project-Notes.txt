
======================================
2D Survival Game Notes
======================================

Source:
https://www.udemy.com/course/unreal-engine-5-create-a-top-down-2d-survivors-style-game

=====================================================================
Section 2: Basic Setup

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
3. Create Project and Player Flipbooks

Importing Textures:

* Eliminate Blurriness:
  * Open Texture -> Details -> Advanced -> Filter -> Nearest

* Other Textuire Settings:
  * Right-click -> Sprite Actions -> Apply Paper2D Texture Settings
    * This makes the background transparent

Extract Sprites from Texture:
* Reason: You cannot drag a Texture into a scene, but you can with a Sprite
* Right-click->Sprite Actions->Extract Sprites
* This opens the Extract Sprites Dialog:
  * Change Sprite Extract Mode from Auto to Grid:
    * Auto will produce uneven sprites
  * You then manually edit the Sprites using Cell Width and Cell Height
    * This will be dependent upon the source sprite
  * Click the Extract button and Sprite assets will then be generated in the project

Create Flipbooks (animations) from the Sprites:
* Right-click the Sprites you want in a Flipbook -> Create Flipbook
  * NOTE:
   * Using Asesprite and importing png's and json files makes the Flipbook process easier
     * The extracted sprites can be named for easier selection

Bulk Edit:
* Select multiple Flipbooks -> Right-click -> Asset Actions-> Edit Selection in Property Matrix


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
4. TileMap and Scaling

Source Tileset:
https://0x72.itch.io/dungeontileset-ii
* 0x72_DungeonTilesetII_v1.7.png

Importing the Texture:
* Right-click->Sprite Actions->Apply Paper2D Texture Settings
* Open asset -> Details -> Filter -> Nearest

Creating the Tileset:
* Right-click asset -> Sprite Actions -> Create Tile Set

Tileset Grid Settings:
* Open Tileset -> Tile Size:
  * 161x16 for this asset

Create a TileMap from the Tile
* Right-click the TileSet -> Create Tile Map

Tile Map:
* Create levels with this object
* Can have multiple layers
* Change size of Map using Details -> Setup -> Map Width / Map Height
* Once a TileMap is created, it can be dragged into the level scene

Note:
* In this project, it seems to be set up as X-right, Y-down (Top Left Corner)
* Location of TileMap in scene set to (-500,-500,5)
  * The height of 5 was supposedly for handling capsule collisions


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
5. Create Player Character

Base Class: Character
Components:
* Paper Flipbook

Paper Flipbook:
* Source Flipbook: Set the player sprite flipbook
* Rotation:
  * This project rotated the PaperFlipbook to -90 around X
  * This basically has the player sprite facing upwards (down +Z axis)
  * This also means the player character will be moving in the XY Plane 2D space

Capsule Component:
* Adjusted to fit the player character sprite
  * Capsule Half Height: 14
  * Capsule Radius: 14
* Collision Presets:
  * Changed from Pawn to Custom
    * Collision Responses: Ignore (sets all to Ignore)
    * Object Responses->WorldStatic:  Block
    * Object Responses->Pawn:  Overlap

Camera:
* Spring Arm Component + Camera (child)
* SpringArm Settings:
  * Rotation: (-90, -90, 0)
    * This rotates around the Y axis so it is facing down at the player flipbook
    * This rotates around the X axis so it "twists" so it is aligned properly
  * Target Arm Length: 1300
    * With an Orthographic camera, the distance will have no effect on the camera
    * This is just to get some distance between the player sprite and the camera
  * Camera Collision -> Do Collision Test:  FALSE
    * This ensures the camera doesn't collide with any obstacles / objects
  * Lag -> Enable Camera Lag:  TRUE
  * Lag -> Camera Lag Speed:  6.0
* Camera Settings:
  * Projection Mode: Orthographic
  * Ortho Width: 512
    * Note: My Ortho Width was automatically set to 1536, while his was 512

Game Mode:
* GM_InGame
* Default Pawn Class: BP_Player

Testing:
* Camera too close
* Player character too bright

Fixes:
* FollowCamera:
  * Change Ortho Width to 700
* PaperFlipbook:
  * Sprite -> Sprite Color: Changed from White to a Gray
    * Note: There are no lights in the scene
    * Supposedly, Sprites are still affected by their default color
    * TODO: Investigate a better solution
      * I've written a local document about this (Unreal Sprite Settings.txt)

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
6. Setup Enhanced Inputs

Steps:
* Create InputActions
* Create Input Mapping Context
* Set Mapping Context on the player controller


Inputs:
WASD:

D
* Right
* Modifiers: None

A:
* Left
* Modifiers:
  * Negate => X: true, Y: false, Z: false (only negates X)

S:
* Down
* Modifiers:
  * Swizzle Input Axis Values => Order: YXZ (default, interprets input as Y input)

W:
* Up
* Modifiers:
  * Swizzle Input Axis Values => Order: YXZ (default, interprets input as Y input)
  * Negate => X: false, Y: true, Z: false (only negates Y)


NOTE:
* Notice that he has Negate on W / Up. This is because of the way he set up the game, where +Y is down. This top-down game where the view is looking down -Z. +X is right, +Y is down. This is equivalent to the "Top" Orthographic view. Personally, I think I would have chosen the "Right" view, where +Z is up, +X is right (i.e. the XZ plane is the 2D game space)

---------------------------------------------------------------
Handling the Events

* In the player Blueprint (e.g. BP_Player), in the Event Graph, right-click, start typing one of your Input Actions to handle the Enhanced Input Action Event (e.g. IA_Movement)

* Since the Value Type in IA_Movement was set to Axis2D (Vector2D), the "Action Value" will be a Vector2D. Drag and select Break Vector 2D (or Right-click and "Break" the pin) to split it into X and Y values. Note: I prefer to drag and break as it keeps the Event Node cleaner.

---------------------------------------------------------------
Input Action:
* Triggered: Player is holding button
* Started:   Player just pressed the button
* Completed: Player just released the button

---------------------------------------------------------------
Applying Movement to the Player Character

In the player Blueprint (BP_Player, which is a Character subclass)

Handling the IA_Movement Enhanced Input Action Event in the Blueprint Event Graph

Horizontal Direction
* Node: AddMovementInput (inherited from Pawn)
* We set "World Direction" to (1.0, 0.0, 0.0) 
  * This is the X-direction
  * We passed in ActionValX (from the input) into Scale Value

Vertical Direction
* Node: AddMovementInput (inherited from Pawn)
* We set "World Direction" to (0.0, 1.0, 0.0)
  * This is the Y-direction
  * We passed in ActionValY (from the input) into Scale Value


Character Movement Component:
* There are many values here we can tweak, but only will focus on a few.
* Character Movement: Walking
  * Max Walk Speed: Changed from 600cm/s to 100cm/s

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
7. Animating Player Character

Note:
* Marked ActionValX and ActionValY to Private so other derived Blueprints cannot access them.

Animations:
* Added variable named CharacterAnimations of type String, as a Map of String to PaperFlipbook
  * Note that we made the PaperFlipbook an Object Reference
  * Mapped animation names to animation flipbook assets here 
    * e.g. Idle_Up, Idle_Down, Move_Left, Move_Up, etc

Move State
* Added asset of type Enumeration (Blueprint -> Enumeration): E_MoveState
  * This is basically just an Enum
* Click Add Enumerator to add enumerations
  * Up, Down, Left, Right

Playing Animation
* In BP_Player input graph, after the 2nd Add Movement Input Node:
* Added Sequence for checking Vertical then Horizontal movement. This is a personal preference.
* Added Variable called MoveState of type E_MoveState
* Setting MoveState from input value (note: +Y is DOWN and -Y is UP)
* Added GateNode
* The animation Gate Node here does the following:
  * When the user is moving in a single direction then moves in another direction, the player character will keeps its original "facing". For example, if the player is moving directly left, and then presses up while still moving left, the character will continue to face left.

GetProperAnim function:
* Set to Pure (meaning no Execution Pin, only input arguments or return value)
* Output: PaperFlipbook
* Input string "Str" (key for an entry in Character Animations Map)
  * Expanded Input and Unchecked Pass-by-Reference, Default Value: (left empty)
  * Now we can input any string manually into the function node
* When player releases all keys, the animation should be "idle"

Gate Node:
* This seems to be used so Vertical and Horizontal animations dont keep overriding one another
* The branch FALSE conditions are mapped to the "Open" gates of the opposite animation directions
* Once we set a PaperFlipbook direction animation, CLOSE the opposite gate
* This is all set up so there are no animations overriding one another
  * TODO: Figure out a cleaner solution
  * TODO: Does PaperZD make this better? PaperZD actually has PaperZDAnimBlueprints

---------------------------
Documentation on Gate Node:
https://docs.unrealengine.com/4.27/en-US/ProgrammingAndScripting/Blueprints/UserGuide/FlowControl/
https://www.youtube.com/watch?v=utMuBhYLPMo

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
8. Create Dummy Enemy

Using the 0x72_Dungeon_TilesetII_v1_7
* Extract Sprites
* We just needed one sprite (upper right enemy)
* Tweaking parameters in Grid category:
  * Example
    * Cell Width x Cell Height: 50x50 - manually sets cell sizing
    * Num Cells X, Y: 1, 1 - manually sets number of cells
    * Margin X, Y: Sets grid start position
  * By changing these values, we can Extract any Sprite from a Texture
    * For example, in my shooter game, I could extract the diamonds from the boss ship
  * This will be especially useful when dealing with sprites of different sizes
    * This process seems tedious and painful, trial and error to get grid in proper place.
    * NOTE: Aseprite might be able to help with this

For the imp enemy in the right corner:
* Cell Width, Height:  14, 14
* Num Cells X, Y:      8, 1
* Margin X, Y:         370, 19
* Spacing X, Y:        2, 0   

NOTE: Maybe 16x16 without spacing would work better, but I'll leave it be.   

* Deleted first 4 sprites generated. These are the idle anim, which we aren't using.

ENEMY:
BP_AI, Character:
* All mobs will use BP_AI
* Start With Tick Enabled: Set to FALSE
  * The Tick Event will only be triggered when it is necessary for movement
* Capsule Component:
  * Capsule Half Height: Changed from 88 to 8
  * Capsule Radius: Changed from 34 to 8
  * Collision Presets: Changed from Pawn to Custom
    * Clicked Ignore for everything, excpet:
      * WorldStatic:   Block
      * WorldDynamic:  Overlap
      * Pawn:          Overlap
      * Destructible:  Overlap - Note: We will use this channel for pickup items
* Added PaperFlipbook Component
  * Under Capsule Component
  * Rotation: (-90, 0, 0) (So it is facing up the World +Z)
  * Location: (0, 0, 5) (So it is raised a little higher than BP_Player Flipbook to avoid flickering)
  * Scale: (1.2, 1.2, 1.2) (So it is just a little bit bigger than the default)
  * Advanced:
    * NOTE: These are optional as we will not be adding any directional lights in the scene
    * Affect Dynamic Indirect Light: FALSE
    * Affect Distance Field Lighting: FALSE
    * Lighting Channels: Unselected all (Only Channel 0 enabled by default)
    * Static When Not Moveable: FALSE
  * Collision Presets: NoCollision
    * We don't need the PaperFlipbook itself to respond to any collision (the CapsuleComponent already has collision, as above)
* Character Movement Component:
  * Character Movement: Walking:
    * Max Walk Speed: 40
  * Planar Movement
    * Constrain to Plane:  TRUE
    * Plane Constraint Axis Setting: Z
      * Note that this also automatically sets the Plane Constraint Normal to (0,0,1)
      * This locks the character movement in the Z, meaning it cannot go up or down the Z axis
* BP_AI (Self)
  * Actor -> Advanced -> Tags
    * Added tag "enemy" (all lowercase)
  * Pawn -> Use Controller Rotation Yaw: FALSE
    * If this is true, then the actor will rotate when the controller changes its Yaw (rotation around Z axis), which we do NOT want
    * Note that setting for Pitch and Roll are already disabled by default
  * Character Movement (Rotation Settings)
    * Notice that this in the Self NOT the Movement Component!
    * Note: I dont know why this was pointed out, it wasn't changed that I'm aware of
  * Pawn -> Auto Possess AI: Changed to "Placed in World or Spawned"
    * This means no matter how this is spawned, possess by an AI

PROTIP:
* Click the Gear next to the search and filter to: Show Only Modified Properties
* This is how we can ensure the proper settings are changed
* NOTE: This helped me figure out that I accidentally made some changes to BP_Player!

After testing:
* Changed BP_AI:
  * Changed Capsule Half Height and Radius from 8, 8 to 14, 14
  * Changed Paper Flipbook setting from 1.2 to 2




++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

=====================================================================
